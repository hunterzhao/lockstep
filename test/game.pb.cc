// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace game {
class WalkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Walk> {
} _Walk_default_instance_;
class JumpDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Jump> {
} _Jump_default_instance_;
class ActionProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ActionProto> {
} _ActionProto_default_instance_;
class UnitReqProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnitReqProto> {
} _UnitReqProto_default_instance_;
class GameReqProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameReqProto> {
} _GameReqProto_default_instance_;
class PlayerInfoProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlayerInfoProto> {
} _PlayerInfoProto_default_instance_;
class UnitInfoProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UnitInfoProto> {
} _UnitInfoProto_default_instance_;
class GameResProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GameResProto> {
} _GameResProto_default_instance_;

namespace protobuf_game_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Walk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProto, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProto, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProto, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProto, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProto, walkdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProto, jumpdata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitReqProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitReqProto, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReqProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReqProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReqProto, unitid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReqProto, playerid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReqProto, unitreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReqProto, actionreq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoProto, playerid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfoProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResProto, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResProto, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResProto, actions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResProto, unitinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameResProto, playerinfo_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Walk)},
  { 5, -1, sizeof(Jump)},
  { 10, -1, sizeof(ActionProto)},
  { 22, -1, sizeof(UnitReqProto)},
  { 28, -1, sizeof(GameReqProto)},
  { 38, -1, sizeof(PlayerInfoProto)},
  { 44, -1, sizeof(UnitInfoProto)},
  { 49, -1, sizeof(GameResProto)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Walk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Jump_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ActionProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnitReqProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameReqProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlayerInfoProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UnitInfoProto_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GameResProto_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _Walk_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Jump_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _ActionProto_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _UnitReqProto_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _GameReqProto_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _PlayerInfoProto_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _UnitInfoProto_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _GameResProto_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Walk_default_instance_.DefaultConstruct();
  _Jump_default_instance_.DefaultConstruct();
  _ActionProto_default_instance_.DefaultConstruct();
  _UnitReqProto_default_instance_.DefaultConstruct();
  _GameReqProto_default_instance_.DefaultConstruct();
  _PlayerInfoProto_default_instance_.DefaultConstruct();
  _UnitInfoProto_default_instance_.DefaultConstruct();
  _GameResProto_default_instance_.DefaultConstruct();
  _ActionProto_default_instance_.get_mutable()->walkdata_ = const_cast< ::game::Walk*>(
      ::game::Walk::internal_default_instance());
  _ActionProto_default_instance_.get_mutable()->jumpdata_ = const_cast< ::game::Jump*>(
      ::game::Jump::internal_default_instance());
  _GameReqProto_default_instance_.get_mutable()->unitreq_ = const_cast< ::game::UnitReqProto*>(
      ::game::UnitReqProto::internal_default_instance());
  _GameReqProto_default_instance_.get_mutable()->actionreq_ = const_cast< ::game::ActionProto*>(
      ::game::ActionProto::internal_default_instance());
  _GameResProto_default_instance_.get_mutable()->unitinfo_ = const_cast< ::game::UnitInfoProto*>(
      ::game::UnitInfoProto::internal_default_instance());
  _GameResProto_default_instance_.get_mutable()->playerinfo_ = const_cast< ::game::PlayerInfoProto*>(
      ::game::PlayerInfoProto::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ngame.proto\022\004game\"\006\n\004Walk\"\006\n\004Jump\"\212\001\n\013A"
      "ctionProto\022\020\n\010playerid\030\001 \001(\005\022\014\n\004type\030\002 \001"
      "(\005\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\t\n\001z\030\005 \001(\001\022\034\n\010w"
      "alkdata\030\006 \001(\0132\n.game.Walk\022\034\n\010jumpdata\030\007 "
      "\001(\0132\n.game.Jump\"\034\n\014UnitReqProto\022\014\n\004type\030"
      "\001 \001(\005\"\211\001\n\014GameReqProto\022\014\n\004type\030\001 \001(\005\022\016\n\006"
      "unitid\030\002 \001(\005\022\020\n\010playerid\030\003 \001(\005\022#\n\007unitre"
      "q\030\004 \001(\0132\022.game.UnitReqProto\022$\n\tactionreq"
      "\030\005 \001(\0132\021.game.ActionProto\"#\n\017PlayerInfoP"
      "roto\022\020\n\010playerid\030\001 \001(\005\"\017\n\rUnitInfoProto\""
      "\240\001\n\014GameResProto\022\014\n\004type\030\001 \001(\005\022\014\n\004code\030\002"
      " \001(\005\022\"\n\007actions\030\003 \003(\0132\021.game.ActionProto"
      "\022%\n\010unitinfo\030\004 \001(\0132\023.game.UnitInfoProto\022"
      ")\n\nplayerinfo\030\005 \001(\0132\025.game.PlayerInfoPro"
      "tob\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 570);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_game_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Walk::Walk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.Walk)
}
Walk::Walk(const Walk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.Walk)
}

void Walk::SharedCtor() {
  _cached_size_ = 0;
}

Walk::~Walk() {
  // @@protoc_insertion_point(destructor:game.Walk)
  SharedDtor();
}

void Walk::SharedDtor() {
}

void Walk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Walk::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Walk& Walk::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

Walk* Walk::New(::google::protobuf::Arena* arena) const {
  Walk* n = new Walk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Walk::Clear() {
// @@protoc_insertion_point(message_clear_start:game.Walk)
}

bool Walk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.Walk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:game.Walk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.Walk)
  return false;
#undef DO_
}

void Walk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.Walk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:game.Walk)
}

::google::protobuf::uint8* Walk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.Walk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:game.Walk)
  return target;
}

size_t Walk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.Walk)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Walk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.Walk)
  GOOGLE_DCHECK_NE(&from, this);
  const Walk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Walk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.Walk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.Walk)
    MergeFrom(*source);
  }
}

void Walk::MergeFrom(const Walk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.Walk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Walk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.Walk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Walk::CopyFrom(const Walk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.Walk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Walk::IsInitialized() const {
  return true;
}

void Walk::Swap(Walk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Walk::InternalSwap(Walk* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Walk::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Walk

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Jump::Jump()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.Jump)
}
Jump::Jump(const Jump& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.Jump)
}

void Jump::SharedCtor() {
  _cached_size_ = 0;
}

Jump::~Jump() {
  // @@protoc_insertion_point(destructor:game.Jump)
  SharedDtor();
}

void Jump::SharedDtor() {
}

void Jump::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Jump::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Jump& Jump::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

Jump* Jump::New(::google::protobuf::Arena* arena) const {
  Jump* n = new Jump;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Jump::Clear() {
// @@protoc_insertion_point(message_clear_start:game.Jump)
}

bool Jump::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.Jump)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:game.Jump)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.Jump)
  return false;
#undef DO_
}

void Jump::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.Jump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:game.Jump)
}

::google::protobuf::uint8* Jump::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.Jump)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:game.Jump)
  return target;
}

size_t Jump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.Jump)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Jump::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.Jump)
  GOOGLE_DCHECK_NE(&from, this);
  const Jump* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Jump>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.Jump)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.Jump)
    MergeFrom(*source);
  }
}

void Jump::MergeFrom(const Jump& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.Jump)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Jump::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.Jump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Jump::CopyFrom(const Jump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.Jump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Jump::IsInitialized() const {
  return true;
}

void Jump::Swap(Jump* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Jump::InternalSwap(Jump* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Jump::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Jump

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionProto::kPlayeridFieldNumber;
const int ActionProto::kTypeFieldNumber;
const int ActionProto::kXFieldNumber;
const int ActionProto::kYFieldNumber;
const int ActionProto::kZFieldNumber;
const int ActionProto::kWalkdataFieldNumber;
const int ActionProto::kJumpdataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionProto::ActionProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.ActionProto)
}
ActionProto::ActionProto(const ActionProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_walkdata()) {
    walkdata_ = new ::game::Walk(*from.walkdata_);
  } else {
    walkdata_ = NULL;
  }
  if (from.has_jumpdata()) {
    jumpdata_ = new ::game::Jump(*from.jumpdata_);
  } else {
    jumpdata_ = NULL;
  }
  ::memcpy(&playerid_, &from.playerid_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:game.ActionProto)
}

void ActionProto::SharedCtor() {
  ::memset(&walkdata_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&walkdata_) + sizeof(z_));
  _cached_size_ = 0;
}

ActionProto::~ActionProto() {
  // @@protoc_insertion_point(destructor:game.ActionProto)
  SharedDtor();
}

void ActionProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete walkdata_;
  }
  if (this != internal_default_instance()) {
    delete jumpdata_;
  }
}

void ActionProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionProto::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionProto& ActionProto::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

ActionProto* ActionProto::New(::google::protobuf::Arena* arena) const {
  ActionProto* n = new ActionProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:game.ActionProto)
  if (GetArenaNoVirtual() == NULL && walkdata_ != NULL) {
    delete walkdata_;
  }
  walkdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && jumpdata_ != NULL) {
    delete jumpdata_;
  }
  jumpdata_ = NULL;
  ::memset(&playerid_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&playerid_) + sizeof(z_));
}

bool ActionProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.ActionProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .game.Walk walkdata = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_walkdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .game.Jump jumpdata = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jumpdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.ActionProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.ActionProto)
  return false;
#undef DO_
}

void ActionProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.ActionProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // double x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // double y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // double z = 5;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  // .game.Walk walkdata = 6;
  if (this->has_walkdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->walkdata_, output);
  }

  // .game.Jump jumpdata = 7;
  if (this->has_jumpdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->jumpdata_, output);
  }

  // @@protoc_insertion_point(serialize_end:game.ActionProto)
}

::google::protobuf::uint8* ActionProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.ActionProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // double x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // double y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // double z = 5;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  // .game.Walk walkdata = 6;
  if (this->has_walkdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->walkdata_, deterministic, target);
  }

  // .game.Jump jumpdata = 7;
  if (this->has_jumpdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->jumpdata_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:game.ActionProto)
  return target;
}

size_t ActionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.ActionProto)
  size_t total_size = 0;

  // .game.Walk walkdata = 6;
  if (this->has_walkdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->walkdata_);
  }

  // .game.Jump jumpdata = 7;
  if (this->has_jumpdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->jumpdata_);
  }

  // int32 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double x = 3;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double z = 5;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.ActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.ActionProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.ActionProto)
    MergeFrom(*source);
  }
}

void ActionProto::MergeFrom(const ActionProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.ActionProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_walkdata()) {
    mutable_walkdata()->::game::Walk::MergeFrom(from.walkdata());
  }
  if (from.has_jumpdata()) {
    mutable_jumpdata()->::game::Jump::MergeFrom(from.jumpdata());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void ActionProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.ActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProto::CopyFrom(const ActionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.ActionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProto::IsInitialized() const {
  return true;
}

void ActionProto::Swap(ActionProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionProto::InternalSwap(ActionProto* other) {
  std::swap(walkdata_, other->walkdata_);
  std::swap(jumpdata_, other->jumpdata_);
  std::swap(playerid_, other->playerid_);
  std::swap(type_, other->type_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionProto::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionProto

// int32 playerid = 1;
void ActionProto::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 ActionProto::playerid() const {
  // @@protoc_insertion_point(field_get:game.ActionProto.playerid)
  return playerid_;
}
void ActionProto::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:game.ActionProto.playerid)
}

// int32 type = 2;
void ActionProto::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 ActionProto::type() const {
  // @@protoc_insertion_point(field_get:game.ActionProto.type)
  return type_;
}
void ActionProto::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:game.ActionProto.type)
}

// double x = 3;
void ActionProto::clear_x() {
  x_ = 0;
}
double ActionProto::x() const {
  // @@protoc_insertion_point(field_get:game.ActionProto.x)
  return x_;
}
void ActionProto::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:game.ActionProto.x)
}

// double y = 4;
void ActionProto::clear_y() {
  y_ = 0;
}
double ActionProto::y() const {
  // @@protoc_insertion_point(field_get:game.ActionProto.y)
  return y_;
}
void ActionProto::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:game.ActionProto.y)
}

// double z = 5;
void ActionProto::clear_z() {
  z_ = 0;
}
double ActionProto::z() const {
  // @@protoc_insertion_point(field_get:game.ActionProto.z)
  return z_;
}
void ActionProto::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:game.ActionProto.z)
}

// .game.Walk walkdata = 6;
bool ActionProto::has_walkdata() const {
  return this != internal_default_instance() && walkdata_ != NULL;
}
void ActionProto::clear_walkdata() {
  if (GetArenaNoVirtual() == NULL && walkdata_ != NULL) delete walkdata_;
  walkdata_ = NULL;
}
const ::game::Walk& ActionProto::walkdata() const {
  // @@protoc_insertion_point(field_get:game.ActionProto.walkdata)
  return walkdata_ != NULL ? *walkdata_
                         : *::game::Walk::internal_default_instance();
}
::game::Walk* ActionProto::mutable_walkdata() {
  
  if (walkdata_ == NULL) {
    walkdata_ = new ::game::Walk;
  }
  // @@protoc_insertion_point(field_mutable:game.ActionProto.walkdata)
  return walkdata_;
}
::game::Walk* ActionProto::release_walkdata() {
  // @@protoc_insertion_point(field_release:game.ActionProto.walkdata)
  
  ::game::Walk* temp = walkdata_;
  walkdata_ = NULL;
  return temp;
}
void ActionProto::set_allocated_walkdata(::game::Walk* walkdata) {
  delete walkdata_;
  walkdata_ = walkdata;
  if (walkdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:game.ActionProto.walkdata)
}

// .game.Jump jumpdata = 7;
bool ActionProto::has_jumpdata() const {
  return this != internal_default_instance() && jumpdata_ != NULL;
}
void ActionProto::clear_jumpdata() {
  if (GetArenaNoVirtual() == NULL && jumpdata_ != NULL) delete jumpdata_;
  jumpdata_ = NULL;
}
const ::game::Jump& ActionProto::jumpdata() const {
  // @@protoc_insertion_point(field_get:game.ActionProto.jumpdata)
  return jumpdata_ != NULL ? *jumpdata_
                         : *::game::Jump::internal_default_instance();
}
::game::Jump* ActionProto::mutable_jumpdata() {
  
  if (jumpdata_ == NULL) {
    jumpdata_ = new ::game::Jump;
  }
  // @@protoc_insertion_point(field_mutable:game.ActionProto.jumpdata)
  return jumpdata_;
}
::game::Jump* ActionProto::release_jumpdata() {
  // @@protoc_insertion_point(field_release:game.ActionProto.jumpdata)
  
  ::game::Jump* temp = jumpdata_;
  jumpdata_ = NULL;
  return temp;
}
void ActionProto::set_allocated_jumpdata(::game::Jump* jumpdata) {
  delete jumpdata_;
  jumpdata_ = jumpdata;
  if (jumpdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:game.ActionProto.jumpdata)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnitReqProto::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitReqProto::UnitReqProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.UnitReqProto)
}
UnitReqProto::UnitReqProto(const UnitReqProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:game.UnitReqProto)
}

void UnitReqProto::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

UnitReqProto::~UnitReqProto() {
  // @@protoc_insertion_point(destructor:game.UnitReqProto)
  SharedDtor();
}

void UnitReqProto::SharedDtor() {
}

void UnitReqProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitReqProto::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnitReqProto& UnitReqProto::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnitReqProto* UnitReqProto::New(::google::protobuf::Arena* arena) const {
  UnitReqProto* n = new UnitReqProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnitReqProto::Clear() {
// @@protoc_insertion_point(message_clear_start:game.UnitReqProto)
  type_ = 0;
}

bool UnitReqProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.UnitReqProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.UnitReqProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.UnitReqProto)
  return false;
#undef DO_
}

void UnitReqProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.UnitReqProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:game.UnitReqProto)
}

::google::protobuf::uint8* UnitReqProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.UnitReqProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:game.UnitReqProto)
  return target;
}

size_t UnitReqProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.UnitReqProto)
  size_t total_size = 0;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitReqProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.UnitReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitReqProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitReqProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.UnitReqProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.UnitReqProto)
    MergeFrom(*source);
  }
}

void UnitReqProto::MergeFrom(const UnitReqProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.UnitReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void UnitReqProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.UnitReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitReqProto::CopyFrom(const UnitReqProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.UnitReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitReqProto::IsInitialized() const {
  return true;
}

void UnitReqProto::Swap(UnitReqProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitReqProto::InternalSwap(UnitReqProto* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnitReqProto::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnitReqProto

// int32 type = 1;
void UnitReqProto::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 UnitReqProto::type() const {
  // @@protoc_insertion_point(field_get:game.UnitReqProto.type)
  return type_;
}
void UnitReqProto::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:game.UnitReqProto.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameReqProto::kTypeFieldNumber;
const int GameReqProto::kUnitidFieldNumber;
const int GameReqProto::kPlayeridFieldNumber;
const int GameReqProto::kUnitreqFieldNumber;
const int GameReqProto::kActionreqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameReqProto::GameReqProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.GameReqProto)
}
GameReqProto::GameReqProto(const GameReqProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unitreq()) {
    unitreq_ = new ::game::UnitReqProto(*from.unitreq_);
  } else {
    unitreq_ = NULL;
  }
  if (from.has_actionreq()) {
    actionreq_ = new ::game::ActionProto(*from.actionreq_);
  } else {
    actionreq_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&type_) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:game.GameReqProto)
}

void GameReqProto::SharedCtor() {
  ::memset(&unitreq_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&unitreq_) + sizeof(playerid_));
  _cached_size_ = 0;
}

GameReqProto::~GameReqProto() {
  // @@protoc_insertion_point(destructor:game.GameReqProto)
  SharedDtor();
}

void GameReqProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete unitreq_;
  }
  if (this != internal_default_instance()) {
    delete actionreq_;
  }
}

void GameReqProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameReqProto::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameReqProto& GameReqProto::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameReqProto* GameReqProto::New(::google::protobuf::Arena* arena) const {
  GameReqProto* n = new GameReqProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameReqProto::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GameReqProto)
  if (GetArenaNoVirtual() == NULL && unitreq_ != NULL) {
    delete unitreq_;
  }
  unitreq_ = NULL;
  if (GetArenaNoVirtual() == NULL && actionreq_ != NULL) {
    delete actionreq_;
  }
  actionreq_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&type_) + sizeof(playerid_));
}

bool GameReqProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.GameReqProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 unitid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 playerid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .game.UnitReqProto unitreq = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unitreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .game.ActionProto actionreq = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actionreq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.GameReqProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.GameReqProto)
  return false;
#undef DO_
}

void GameReqProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.GameReqProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 unitid = 2;
  if (this->unitid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unitid(), output);
  }

  // int32 playerid = 3;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playerid(), output);
  }

  // .game.UnitReqProto unitreq = 4;
  if (this->has_unitreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->unitreq_, output);
  }

  // .game.ActionProto actionreq = 5;
  if (this->has_actionreq()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->actionreq_, output);
  }

  // @@protoc_insertion_point(serialize_end:game.GameReqProto)
}

::google::protobuf::uint8* GameReqProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GameReqProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 unitid = 2;
  if (this->unitid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unitid(), target);
  }

  // int32 playerid = 3;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playerid(), target);
  }

  // .game.UnitReqProto unitreq = 4;
  if (this->has_unitreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->unitreq_, deterministic, target);
  }

  // .game.ActionProto actionreq = 5;
  if (this->has_actionreq()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->actionreq_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:game.GameReqProto)
  return target;
}

size_t GameReqProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GameReqProto)
  size_t total_size = 0;

  // .game.UnitReqProto unitreq = 4;
  if (this->has_unitreq()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unitreq_);
  }

  // .game.ActionProto actionreq = 5;
  if (this->has_actionreq()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->actionreq_);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 unitid = 2;
  if (this->unitid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unitid());
  }

  // int32 playerid = 3;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameReqProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.GameReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GameReqProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameReqProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.GameReqProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.GameReqProto)
    MergeFrom(*source);
  }
}

void GameReqProto::MergeFrom(const GameReqProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.GameReqProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_unitreq()) {
    mutable_unitreq()->::game::UnitReqProto::MergeFrom(from.unitreq());
  }
  if (from.has_actionreq()) {
    mutable_actionreq()->::game::ActionProto::MergeFrom(from.actionreq());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.unitid() != 0) {
    set_unitid(from.unitid());
  }
  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void GameReqProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.GameReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameReqProto::CopyFrom(const GameReqProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GameReqProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReqProto::IsInitialized() const {
  return true;
}

void GameReqProto::Swap(GameReqProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameReqProto::InternalSwap(GameReqProto* other) {
  std::swap(unitreq_, other->unitreq_);
  std::swap(actionreq_, other->actionreq_);
  std::swap(type_, other->type_);
  std::swap(unitid_, other->unitid_);
  std::swap(playerid_, other->playerid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameReqProto::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameReqProto

// int32 type = 1;
void GameReqProto::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 GameReqProto::type() const {
  // @@protoc_insertion_point(field_get:game.GameReqProto.type)
  return type_;
}
void GameReqProto::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:game.GameReqProto.type)
}

// int32 unitid = 2;
void GameReqProto::clear_unitid() {
  unitid_ = 0;
}
::google::protobuf::int32 GameReqProto::unitid() const {
  // @@protoc_insertion_point(field_get:game.GameReqProto.unitid)
  return unitid_;
}
void GameReqProto::set_unitid(::google::protobuf::int32 value) {
  
  unitid_ = value;
  // @@protoc_insertion_point(field_set:game.GameReqProto.unitid)
}

// int32 playerid = 3;
void GameReqProto::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 GameReqProto::playerid() const {
  // @@protoc_insertion_point(field_get:game.GameReqProto.playerid)
  return playerid_;
}
void GameReqProto::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:game.GameReqProto.playerid)
}

// .game.UnitReqProto unitreq = 4;
bool GameReqProto::has_unitreq() const {
  return this != internal_default_instance() && unitreq_ != NULL;
}
void GameReqProto::clear_unitreq() {
  if (GetArenaNoVirtual() == NULL && unitreq_ != NULL) delete unitreq_;
  unitreq_ = NULL;
}
const ::game::UnitReqProto& GameReqProto::unitreq() const {
  // @@protoc_insertion_point(field_get:game.GameReqProto.unitreq)
  return unitreq_ != NULL ? *unitreq_
                         : *::game::UnitReqProto::internal_default_instance();
}
::game::UnitReqProto* GameReqProto::mutable_unitreq() {
  
  if (unitreq_ == NULL) {
    unitreq_ = new ::game::UnitReqProto;
  }
  // @@protoc_insertion_point(field_mutable:game.GameReqProto.unitreq)
  return unitreq_;
}
::game::UnitReqProto* GameReqProto::release_unitreq() {
  // @@protoc_insertion_point(field_release:game.GameReqProto.unitreq)
  
  ::game::UnitReqProto* temp = unitreq_;
  unitreq_ = NULL;
  return temp;
}
void GameReqProto::set_allocated_unitreq(::game::UnitReqProto* unitreq) {
  delete unitreq_;
  unitreq_ = unitreq;
  if (unitreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:game.GameReqProto.unitreq)
}

// .game.ActionProto actionreq = 5;
bool GameReqProto::has_actionreq() const {
  return this != internal_default_instance() && actionreq_ != NULL;
}
void GameReqProto::clear_actionreq() {
  if (GetArenaNoVirtual() == NULL && actionreq_ != NULL) delete actionreq_;
  actionreq_ = NULL;
}
const ::game::ActionProto& GameReqProto::actionreq() const {
  // @@protoc_insertion_point(field_get:game.GameReqProto.actionreq)
  return actionreq_ != NULL ? *actionreq_
                         : *::game::ActionProto::internal_default_instance();
}
::game::ActionProto* GameReqProto::mutable_actionreq() {
  
  if (actionreq_ == NULL) {
    actionreq_ = new ::game::ActionProto;
  }
  // @@protoc_insertion_point(field_mutable:game.GameReqProto.actionreq)
  return actionreq_;
}
::game::ActionProto* GameReqProto::release_actionreq() {
  // @@protoc_insertion_point(field_release:game.GameReqProto.actionreq)
  
  ::game::ActionProto* temp = actionreq_;
  actionreq_ = NULL;
  return temp;
}
void GameReqProto::set_allocated_actionreq(::game::ActionProto* actionreq) {
  delete actionreq_;
  actionreq_ = actionreq;
  if (actionreq) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:game.GameReqProto.actionreq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoProto::kPlayeridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoProto::PlayerInfoProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.PlayerInfoProto)
}
PlayerInfoProto::PlayerInfoProto(const PlayerInfoProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  playerid_ = from.playerid_;
  // @@protoc_insertion_point(copy_constructor:game.PlayerInfoProto)
}

void PlayerInfoProto::SharedCtor() {
  playerid_ = 0;
  _cached_size_ = 0;
}

PlayerInfoProto::~PlayerInfoProto() {
  // @@protoc_insertion_point(destructor:game.PlayerInfoProto)
  SharedDtor();
}

void PlayerInfoProto::SharedDtor() {
}

void PlayerInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoProto::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlayerInfoProto& PlayerInfoProto::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlayerInfoProto* PlayerInfoProto::New(::google::protobuf::Arena* arena) const {
  PlayerInfoProto* n = new PlayerInfoProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:game.PlayerInfoProto)
  playerid_ = 0;
}

bool PlayerInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.PlayerInfoProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 playerid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.PlayerInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.PlayerInfoProto)
  return false;
#undef DO_
}

void PlayerInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.PlayerInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerid = 1;
  if (this->playerid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // @@protoc_insertion_point(serialize_end:game.PlayerInfoProto)
}

::google::protobuf::uint8* PlayerInfoProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.PlayerInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 playerid = 1;
  if (this->playerid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:game.PlayerInfoProto)
  return target;
}

size_t PlayerInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.PlayerInfoProto)
  size_t total_size = 0;

  // int32 playerid = 1;
  if (this->playerid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->playerid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.PlayerInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerInfoProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfoProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.PlayerInfoProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.PlayerInfoProto)
    MergeFrom(*source);
  }
}

void PlayerInfoProto::MergeFrom(const PlayerInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.PlayerInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.playerid() != 0) {
    set_playerid(from.playerid());
  }
}

void PlayerInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.PlayerInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoProto::CopyFrom(const PlayerInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.PlayerInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoProto::IsInitialized() const {
  return true;
}

void PlayerInfoProto::Swap(PlayerInfoProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoProto::InternalSwap(PlayerInfoProto* other) {
  std::swap(playerid_, other->playerid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfoProto::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfoProto

// int32 playerid = 1;
void PlayerInfoProto::clear_playerid() {
  playerid_ = 0;
}
::google::protobuf::int32 PlayerInfoProto::playerid() const {
  // @@protoc_insertion_point(field_get:game.PlayerInfoProto.playerid)
  return playerid_;
}
void PlayerInfoProto::set_playerid(::google::protobuf::int32 value) {
  
  playerid_ = value;
  // @@protoc_insertion_point(field_set:game.PlayerInfoProto.playerid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitInfoProto::UnitInfoProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.UnitInfoProto)
}
UnitInfoProto::UnitInfoProto(const UnitInfoProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.UnitInfoProto)
}

void UnitInfoProto::SharedCtor() {
  _cached_size_ = 0;
}

UnitInfoProto::~UnitInfoProto() {
  // @@protoc_insertion_point(destructor:game.UnitInfoProto)
  SharedDtor();
}

void UnitInfoProto::SharedDtor() {
}

void UnitInfoProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitInfoProto::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UnitInfoProto& UnitInfoProto::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

UnitInfoProto* UnitInfoProto::New(::google::protobuf::Arena* arena) const {
  UnitInfoProto* n = new UnitInfoProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnitInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:game.UnitInfoProto)
}

bool UnitInfoProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.UnitInfoProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:game.UnitInfoProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.UnitInfoProto)
  return false;
#undef DO_
}

void UnitInfoProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.UnitInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:game.UnitInfoProto)
}

::google::protobuf::uint8* UnitInfoProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.UnitInfoProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:game.UnitInfoProto)
  return target;
}

size_t UnitInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.UnitInfoProto)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitInfoProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.UnitInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  const UnitInfoProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitInfoProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.UnitInfoProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.UnitInfoProto)
    MergeFrom(*source);
  }
}

void UnitInfoProto::MergeFrom(const UnitInfoProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.UnitInfoProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnitInfoProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.UnitInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitInfoProto::CopyFrom(const UnitInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.UnitInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitInfoProto::IsInitialized() const {
  return true;
}

void UnitInfoProto::Swap(UnitInfoProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitInfoProto::InternalSwap(UnitInfoProto* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnitInfoProto::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnitInfoProto

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameResProto::kTypeFieldNumber;
const int GameResProto::kCodeFieldNumber;
const int GameResProto::kActionsFieldNumber;
const int GameResProto::kUnitinfoFieldNumber;
const int GameResProto::kPlayerinfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameResProto::GameResProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:game.GameResProto)
}
GameResProto::GameResProto(const GameResProto& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      actions_(from.actions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_unitinfo()) {
    unitinfo_ = new ::game::UnitInfoProto(*from.unitinfo_);
  } else {
    unitinfo_ = NULL;
  }
  if (from.has_playerinfo()) {
    playerinfo_ = new ::game::PlayerInfoProto(*from.playerinfo_);
  } else {
    playerinfo_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&type_) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:game.GameResProto)
}

void GameResProto::SharedCtor() {
  ::memset(&unitinfo_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&unitinfo_) + sizeof(code_));
  _cached_size_ = 0;
}

GameResProto::~GameResProto() {
  // @@protoc_insertion_point(destructor:game.GameResProto)
  SharedDtor();
}

void GameResProto::SharedDtor() {
  if (this != internal_default_instance()) {
    delete unitinfo_;
  }
  if (this != internal_default_instance()) {
    delete playerinfo_;
  }
}

void GameResProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResProto::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameResProto& GameResProto::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

GameResProto* GameResProto::New(::google::protobuf::Arena* arena) const {
  GameResProto* n = new GameResProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GameResProto::Clear() {
// @@protoc_insertion_point(message_clear_start:game.GameResProto)
  actions_.Clear();
  if (GetArenaNoVirtual() == NULL && unitinfo_ != NULL) {
    delete unitinfo_;
  }
  unitinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) {
    delete playerinfo_;
  }
  playerinfo_ = NULL;
  ::memset(&type_, 0, reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&type_) + sizeof(code_));
}

bool GameResProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:game.GameResProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .game.ActionProto actions = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .game.UnitInfoProto unitinfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unitinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .game.PlayerInfoProto playerinfo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:game.GameResProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:game.GameResProto)
  return false;
#undef DO_
}

void GameResProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:game.GameResProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // repeated .game.ActionProto actions = 3;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actions(i), output);
  }

  // .game.UnitInfoProto unitinfo = 4;
  if (this->has_unitinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->unitinfo_, output);
  }

  // .game.PlayerInfoProto playerinfo = 5;
  if (this->has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->playerinfo_, output);
  }

  // @@protoc_insertion_point(serialize_end:game.GameResProto)
}

::google::protobuf::uint8* GameResProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.GameResProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 code = 2;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // repeated .game.ActionProto actions = 3;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->actions(i), deterministic, target);
  }

  // .game.UnitInfoProto unitinfo = 4;
  if (this->has_unitinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->unitinfo_, deterministic, target);
  }

  // .game.PlayerInfoProto playerinfo = 5;
  if (this->has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->playerinfo_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:game.GameResProto)
  return target;
}

size_t GameResProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.GameResProto)
  size_t total_size = 0;

  // repeated .game.ActionProto actions = 3;
  {
    unsigned int count = this->actions_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actions(i));
    }
  }

  // .game.UnitInfoProto unitinfo = 4;
  if (this->has_unitinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unitinfo_);
  }

  // .game.PlayerInfoProto playerinfo = 5;
  if (this->has_playerinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->playerinfo_);
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 code = 2;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:game.GameResProto)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameResProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:game.GameResProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:game.GameResProto)
    MergeFrom(*source);
  }
}

void GameResProto::MergeFrom(const GameResProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:game.GameResProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.has_unitinfo()) {
    mutable_unitinfo()->::game::UnitInfoProto::MergeFrom(from.unitinfo());
  }
  if (from.has_playerinfo()) {
    mutable_playerinfo()->::game::PlayerInfoProto::MergeFrom(from.playerinfo());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
}

void GameResProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:game.GameResProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResProto::CopyFrom(const GameResProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.GameResProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResProto::IsInitialized() const {
  return true;
}

void GameResProto::Swap(GameResProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResProto::InternalSwap(GameResProto* other) {
  actions_.InternalSwap(&other->actions_);
  std::swap(unitinfo_, other->unitinfo_);
  std::swap(playerinfo_, other->playerinfo_);
  std::swap(type_, other->type_);
  std::swap(code_, other->code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameResProto::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GameResProto

// int32 type = 1;
void GameResProto::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 GameResProto::type() const {
  // @@protoc_insertion_point(field_get:game.GameResProto.type)
  return type_;
}
void GameResProto::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:game.GameResProto.type)
}

// int32 code = 2;
void GameResProto::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 GameResProto::code() const {
  // @@protoc_insertion_point(field_get:game.GameResProto.code)
  return code_;
}
void GameResProto::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:game.GameResProto.code)
}

// repeated .game.ActionProto actions = 3;
int GameResProto::actions_size() const {
  return actions_.size();
}
void GameResProto::clear_actions() {
  actions_.Clear();
}
const ::game::ActionProto& GameResProto::actions(int index) const {
  // @@protoc_insertion_point(field_get:game.GameResProto.actions)
  return actions_.Get(index);
}
::game::ActionProto* GameResProto::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:game.GameResProto.actions)
  return actions_.Mutable(index);
}
::game::ActionProto* GameResProto::add_actions() {
  // @@protoc_insertion_point(field_add:game.GameResProto.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::game::ActionProto >*
GameResProto::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:game.GameResProto.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::game::ActionProto >&
GameResProto::actions() const {
  // @@protoc_insertion_point(field_list:game.GameResProto.actions)
  return actions_;
}

// .game.UnitInfoProto unitinfo = 4;
bool GameResProto::has_unitinfo() const {
  return this != internal_default_instance() && unitinfo_ != NULL;
}
void GameResProto::clear_unitinfo() {
  if (GetArenaNoVirtual() == NULL && unitinfo_ != NULL) delete unitinfo_;
  unitinfo_ = NULL;
}
const ::game::UnitInfoProto& GameResProto::unitinfo() const {
  // @@protoc_insertion_point(field_get:game.GameResProto.unitinfo)
  return unitinfo_ != NULL ? *unitinfo_
                         : *::game::UnitInfoProto::internal_default_instance();
}
::game::UnitInfoProto* GameResProto::mutable_unitinfo() {
  
  if (unitinfo_ == NULL) {
    unitinfo_ = new ::game::UnitInfoProto;
  }
  // @@protoc_insertion_point(field_mutable:game.GameResProto.unitinfo)
  return unitinfo_;
}
::game::UnitInfoProto* GameResProto::release_unitinfo() {
  // @@protoc_insertion_point(field_release:game.GameResProto.unitinfo)
  
  ::game::UnitInfoProto* temp = unitinfo_;
  unitinfo_ = NULL;
  return temp;
}
void GameResProto::set_allocated_unitinfo(::game::UnitInfoProto* unitinfo) {
  delete unitinfo_;
  unitinfo_ = unitinfo;
  if (unitinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:game.GameResProto.unitinfo)
}

// .game.PlayerInfoProto playerinfo = 5;
bool GameResProto::has_playerinfo() const {
  return this != internal_default_instance() && playerinfo_ != NULL;
}
void GameResProto::clear_playerinfo() {
  if (GetArenaNoVirtual() == NULL && playerinfo_ != NULL) delete playerinfo_;
  playerinfo_ = NULL;
}
const ::game::PlayerInfoProto& GameResProto::playerinfo() const {
  // @@protoc_insertion_point(field_get:game.GameResProto.playerinfo)
  return playerinfo_ != NULL ? *playerinfo_
                         : *::game::PlayerInfoProto::internal_default_instance();
}
::game::PlayerInfoProto* GameResProto::mutable_playerinfo() {
  
  if (playerinfo_ == NULL) {
    playerinfo_ = new ::game::PlayerInfoProto;
  }
  // @@protoc_insertion_point(field_mutable:game.GameResProto.playerinfo)
  return playerinfo_;
}
::game::PlayerInfoProto* GameResProto::release_playerinfo() {
  // @@protoc_insertion_point(field_release:game.GameResProto.playerinfo)
  
  ::game::PlayerInfoProto* temp = playerinfo_;
  playerinfo_ = NULL;
  return temp;
}
void GameResProto::set_allocated_playerinfo(::game::PlayerInfoProto* playerinfo) {
  delete playerinfo_;
  playerinfo_ = playerinfo;
  if (playerinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:game.GameResProto.playerinfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace game

// @@protoc_insertion_point(global_scope)
